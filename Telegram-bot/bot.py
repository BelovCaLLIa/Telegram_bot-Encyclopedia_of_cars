import logging

# –ö–ª–∞—Å—Å –±–æ—Ç–∞, Dispatcher –¥–æ—Å—Ç–∞–≤—â–∏–∫ update, executor –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.builtin import Command, CommandHelp, CommandStart, Text
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

import config
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
from Keyboard import menu
from inline import choice, like_callback

# –î–ª—è –±–¥
from users_sql import SQLighter
from info_car_sql import SQLighterCar

import random
import time

# –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–¥–µ–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞
# –ë–æ–ª–µ–µ —É–¥–æ–±–Ω–∞—è —Ñ–æ—Ä–º–∞
logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s] %(message)s',
                    level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
# parse_mode –Ω—É–∂–µ–Ω –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)
# –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–∞–π–ª —Å –±–¥
db = SQLighter("users_db.db")
db_car = SQLighterCar("info_car_db.db")

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î
max_count_db = 60

# –°—Ç–∞—Ä–æ–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ
old_rand = 0


# –ì–µ–Ω–∏—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ —á–∏—Å–ª–∞
def rand():
    # —è –∑–Ω–∞—é —á—Ç–æ —Ç–∞–∫ –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –¥–µ–ª–∞—Ç—å, –Ω–æ –∫–∞–∫ –∏–Ω–∞—á–µ?
    global old_rand
    shuffle = list(range(1, max_count_db + 1))
    # –ü–µ—Ä–µ–º–µ—à–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    # random.shuffle(shuffle)
    random_value = random.choice(shuffle)
    if old_rand == random_value:
        rand()
    old_rand = random_value
    return random_value


# –û—Ç–≤–µ—Ç –Ω–∞ start
@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!")


# –û—Ç–≤–µ—Ç –Ω–∞ help
@dp.message_handler(CommandHelp())
async def bot_help(message: types.Message):
    text = ['–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
            '/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥',
            '/menu - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥',
            '/remove - –£–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫–∏',
            '/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É',
            '/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏',
            '/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É']
    await message.answer('\n'.join(text))


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É menu
@dp.message_handler(Command("menu"))
async def show_menu(message: Message):
    await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=menu)


# –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å handler –¥–ª—è –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏
@dp.message_handler(Text(equals="–°–ª—É—á–∞–π–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å üé≤"))
async def random_car(message: Message):
    # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ –æ –º–∞—à–∏–Ω–µ
    value = rand()
    info = db_car.export_model(value)
    info += db_car.export_text_about_car(value)
    caption = "".join(map(str, info[0] + info[1]))
    file_photo = db_car.export_photo_front(value)
    # –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–¥–∞–ª—å–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    photo = open("".join(map(str, file_photo[0])), 'rb')
    await message.answer_photo(photo=photo, caption=caption, reply_markup=choice)


@dp.message_handler(Text(equals="üî• –¢–û–ü-5 –ö—Ä–∞—Å–∏–≤—ã—Ö –º–∞—à–∏–Ω"))
async def beautiful_car(message: Message):
    # 5, 18, 26, 51, 52
    beautiful_cars_list = [5, 18, 26, 51, 52]
    for i in range(len(beautiful_cars_list)):
        info = db_car.export_model(beautiful_cars_list[i])
        info += db_car.export_text_about_car(beautiful_cars_list[i])
        caption = "".join(map(str, info[0] + info[1]))
        file_photo = db_car.export_photo_front(beautiful_cars_list[i])
        photo = open("".join(map(str, file_photo[0])), 'rb')
        await message.answer_photo(photo=photo, caption=caption, reply_markup=choice)
    # reply_markup=ReplyKeyboardRemove() - —É–±–∏—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏


@dp.message_handler(Text(equals="üî• –¢–û–ü-5 –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–∞—à–∏–Ω"))
async def interesting_car(message: Message):
    # 25, 26, 28, 46, 53
    interesting_cars = [25, 26, 28, 46, 53]
    for i in range(len(interesting_cars)):
        info = db_car.export_model(interesting_cars[i])
        info += db_car.export_text_about_car(interesting_cars[i])
        caption = "".join(map(str, info[0] + info[1]))
        file_photo = db_car.export_photo_front(interesting_cars[i])
        photo = open("".join(map(str, file_photo[0])), 'rb')
        await message.answer_photo(photo=photo, caption=caption, reply_markup=choice)


@dp.message_handler(Text(equals="üî• –¢–û–ü-5 –ú–∞—à–∏–Ω –≥—Ä—É–ø–ø—ã B"))
async def rally_car(message: Message):
    rally_cars = [10, 56, 55, 58, 57]
    for i in range(len(rally_cars)):
        info = db_car.export_model(rally_cars[i])
        info += db_car.export_text_about_car(rally_cars[i])
        caption = "".join(map(str, info[0] + info[1]))
        file_photo = db_car.export_photo_front(rally_cars[i])
        photo = open("".join(map(str, file_photo[0])), 'rb')
        await message.answer_photo(photo=photo, caption=caption, reply_markup=choice)


@dp.message_handler(Text(equals="üî• –¢–û–ü-5 –°–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–∞—à–∏–Ω"))
async def sport_car(message: Message):
    sport_cars = [1, 8, 30, 34, 35]
    for i in range(len(sport_cars)):
        info = db_car.export_model(sport_cars[i])
        info += db_car.export_text_about_car(sport_cars[i])
        caption = "".join(map(str, info[0] + info[1]))
        file_photo = db_car.export_photo_front(sport_cars[i])
        photo = open("".join(map(str, file_photo[0])), 'rb')
        await message.answer_photo(photo=photo, caption=caption, reply_markup=choice)


# –£–±–µ—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫–∏
@dp.message_handler(Command("remove"))
async def remove(message: Message):
    await message.answer("–£–±–µ—Ä–∞—é –∫–Ω–æ–ø–∫–∏", reply_markup=ReplyKeyboardRemove())


# –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ inlite –∫–Ω–æ–ø–∫—É
# –í—Å–µ –Ω–∞–∂–∞—Ç–∏—è c –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ª–∞–π–∫
@dp.callback_query_handler(like_callback.filter(emotion="like"))
async def lick(call: CallbackQuery, callback_data: dict):
    # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏
    # –≠—Ç–æ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Å—Ç—É–∫—Ü–∏—è
    await call.answer(cache_time=60)
    # –°–º–æ—Ç—Ä–∏–º —á—Ç–æ —Ç–∞–º –≤ –∫–æ–Ω—Å–æ–ª–µ
    logging.info(f"call = {callback_data}")
    # –û—Ç–¥–µ–ª—è–µ–º –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    list_model = ""
    for i in range(len(call.message.caption)):
        list_model += call.message.caption[i]
        last_element = call.message.caption[i-1]
        last_element += call.message.caption[i]
        if last_element == "\n\n":
            break
        else:
            last_element = " "
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å, –ø–µ—Ä–µ–≤–æ–¥—è list –≤ str
    db_car.likes(str(list_model))
    await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫")
    await call.message.edit_reply_markup(reply_markup=None)


# –í—Ç–æ—Ä–æ–π –æ—Ç–ª–æ–≤ –Ω–∞–∂–∞—Ç–∏—è –¥–∏–∑–ª–∞–π–∫–∞
@dp.callback_query_handler(like_callback.filter(emotion="dislike"))
async def dislike(call: CallbackQuery, callback_data: dict):
    await call.answer(cache_time=60)
    logging.info(f"call = {callback_data}")
    # –û—Ç–¥–µ–ª—è–µ–º –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    list_model = ""
    for i in range(len(call.message.caption)):
        list_model += call.message.caption[i]
        last_element = call.message.caption[i - 1]
        last_element += call.message.caption[i]
        if last_element == "\n\n":
            break
        else:
            last_element = " "
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å, –ø–µ—Ä–µ–≤–æ–¥—è list –≤ str
    db_car.dislikes(str(list_model))
    await call.message.answer("–ë—É–¥—É —Å—Ç–∞—Ä–∞—Ç—å—Å—è")
    await call.message.edit_reply_markup(reply_markup=None)


# –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=["subscribe"])
async def subscribe(message: types.Message):
    if not db.subscriber_exists(message.from_user.id):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        db.add_subscriber(message.from_user.id, message.from_user.username, message.from_user.full_name)
    else:
        # –ï—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(message.from_user.id, True)

    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!")


# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏
@dp.message_handler(commands=["unsubscribe"])
async def unsubscribe(message: types.Message):
    if not db.subscriber_exists(message.from_user.id):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        db.add_subscriber(message.from_user.id, message.from_user.username, message.from_user.full_name, False)
        await message.answer("–í—ã –∏—Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        db.update_subscription(message.from_user.id, False)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å.")
